// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ProductTests.XClients.Linkedin.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("IHAveATable", SourceFile="XClients\\Linkedin\\Features\\IHAveATable.feature", SourceLine=0)]
    public partial class IHAveATableFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "IHAveATable.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "IHAveATable", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("I have a vertical table to verify", new string[] {
                "mytag"}, SourceLine=3)]
        public virtual void IHaveAVerticalTableToVerify()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I have a vertical table to verify", new string[] {
                        "mytag"});
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table2.AddRow(new string[] {
                        "ID",
                        "01"});
            table2.AddRow(new string[] {
                        "date",
                        "17.03.17"});
            table2.AddRow(new string[] {
                        "numer",
                        "999"});
            table2.AddRow(new string[] {
                        "letter",
                        "a"});
#line 5
testRunner.Given("I have a vertical table", ((string)(null)), table2, "Given ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("I have a horizontal table to verify", SourceLine=11)]
        public virtual void IHaveAHorizontalTableToVerify()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I have a horizontal table to verify", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Date",
                        "Number",
                        "Letter"});
            table3.AddRow(new string[] {
                        "01",
                        "17.03.17",
                        "999",
                        "a"});
#line 13
testRunner.Given("I have a horizontal table", ((string)(null)), table3, "Given ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("The 1st policy database entries should be", SourceLine=16)]
        public virtual void The1StPolicyDatabaseEntriesShouldBe()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The 1st policy database entries should be", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value",
                        "Table"});
            table4.AddRow(new string[] {
                        "ID",
                        "01",
                        "ID_Table"});
            table4.AddRow(new string[] {
                        "Date",
                        "17.03.17",
                        "Date_Table"});
            table4.AddRow(new string[] {
                        "Numer",
                        "999",
                        "Number_Table"});
            table4.AddRow(new string[] {
                        "Letter",
                        "a",
                        "Letter_Table"});
#line 18
testRunner.Given("The policy 0 database entries should be", ((string)(null)), table4, "Given ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("The 2nd policy database entries should be", SourceLine=24)]
        public virtual void The2NdPolicyDatabaseEntriesShouldBe()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The 2nd policy database entries should be", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Date",
                        "Number",
                        "Letter"});
            table5.AddRow(new string[] {
                        "01",
                        "17.03.17",
                        "999",
                        "a"});
            table5.AddRow(new string[] {
                        "ID_Table",
                        "Date_Table",
                        "Number_Table",
                        "Letter_Table"});
#line 26
testRunner.Given("The policy 1 database entries should be", ((string)(null)), table5, "Given ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
